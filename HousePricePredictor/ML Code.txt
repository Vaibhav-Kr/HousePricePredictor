import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from sklearn.preprocessing import StandardScaler
df = pd.read_csv('C:/Users/HP/Downloads/Video/housing_data.txt',header=None, sep='\s+');
#print(df)
df.columns = ['CRIM', 'ZN', 'INDUS', 'CHAS',
              'NOX', 'RM', 'AGE', 'DIS', 'RAD',
              'TAX', 'PTRATIO', 'B', 'LSTAT', 'MEDV']
print(df.head())
sns.set(style='whitegrid', context='notebook')
cols = ['LSTAT', 'INDUS', 'NOX', 'RM', 'MEDV']
sns.pairplot(df[cols],size=2.5)
plt.show()
cm = np.corrcoef(df[cols].values.T)
sns.set(font_scale=1.5)
hm = sns.heatmap(cm,cbar=True,annot=True,square=True,fmt='.2f',yticklabels=cols,xticklabels=cols)
plt.show()
X = df[['RM']].values
y = df['MEDV'].values
print(y)
print(X.shape)
print(y.shape) 
sc_x = StandardScaler()
sc_y = StandardScaler()
X_std = sc_x.fit_transform(X)
y_std = sc_y.fit_transform(y[:,np.newaxis]).flatten()
#linear regression Gradiant descent Algorithm
class LinearRegressionGD(object):
    def __init__(self, eta=0.001, n_iter=20):
        self.eta = eta
        self.n_iter = n_iter

    def fit(self, X,y):
        self.w =np.zeros(1 + X.shape[1])
        self.cost=[]
        for i in range(self.n_iter):
            output = self.net_input(X)
            errors = (y-output)
            self.w[1:] += self.eta * X.T.dot(errors)
            self.w[0] += self.eta*errors.sum()
            cost = (errors**2).sum() / 2.0
            self.cost.append(cost)
        return self
    def net_input(self, X):
       return np.dot(X,self.w[1:]) + self.w[0]
    
    def predict(self, X):
       return self.net_input(X)
lr = LinearRegressionGD()
lr.fit(X_std, y_std)

plt.plot(range(1,lr.n_iter+1),lr.cost)
plt.ylabel('SSE')
plt.xlabel('Epoch')
plt.show() 

num_rooms_std = sc_x.transform(np.array([[10.0]]))
price_std = lr.predict(num_rooms_std)
print(price_std)
print("price in $1000's: %0.3f"%sc_y.inverse_transform(price_std))
plt.show()



    
        
